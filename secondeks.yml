variables:
- group: credentials


stages:
  - stage: source_coudebuild
    pool:
      name: overall
      demands:
      - Agent.Name -equals ubuntu
    jobs:
    - job: mavenbuild
      displayName: build and publish
      steps:
        - script: echo Hello, world!
          displayName: 'Run a one-line script'
        - bash: |
               echo '${{parameters.msg}}'
          displayName: cmd command checking

        - task: Maven@3
          displayName: build
          inputs:
            mavenPomFile: 'pom.xml'
            goals: 'install'
            publishJUnitResults: false
            javaHomeOption: 'JDKVersion'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false
            sonarQubeRunAnalysis: false


        - task: CopyFiles@2
          displayName: copy to artifactfolder
          inputs:
            SourceFolder: '$(agent.builddirectory)'
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          displayName: pushed to azure_artifact 
          inputs:
            pathToPublish: $(Build.ArtifactStagingDirectory)
            artifactName: MyBuildOutputs

        - task: PostBuildCleanup@3
          inputs:
            disableCertCheck: true            

  - stage: docker_build
    pool:
       name: overall
       demands:
       - Agent.Name -equals docker
    jobs:
      - job: dockerbuild
        steps:
          - script: echo "hi world"
            displayName: testing
          - bash: |
                 sudo apt install docker.io -y
                 sudo chmod 777 /var/run/docker.sock
            displayName: installing docker   
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'MyBuildOutputs'
              itemPattern: '**/target/**'
              targetPath: '$(Pipeline.Workspace)'
          #- task: DownloadBuildArtifacts@1
          #  inputs:
          #    buildType: 'current'
          #    downloadType: 'single'
          #    artifactName: 'MyBuildOutputs'
          #    itemPattern: '**/target/**'
          #    downloadPath: '$(agent.builddirectory)/s/'

          - task: Docker@2
            inputs:
              repository: harshad
              command: build
              Dockerfile: 'Dockerfile'
              tags: $(Build.BuildId)
          
          - bash: |
                 touch f1
                 ls

                 docker save -o imagemyfile.tar harshad:$(Build.BuildId)
                 cd $(Build.ArtifactStagingDirectory)
                 pwd
                 ls
            displayName: tar the docker image
          - bash: |
                   cd $(agent.builddirectory)
                   ls
            displayName: checking agent directory
          
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(agent.builddirectory)/s/'
              contents: 'imagemyfile.tar'
              targetFolder: $(Build.ArtifactStagingDirectory)/s/
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: MyBuildOutputs
          - task: PostBuildCleanup@3
            inputs:
              disableCertCheck: true

  - stage: dockerpushtoecr
    pool:
      name: overall
      demands:
      - Agent.Name -equals ubuntu
    jobs:
      - job: Downloadimage
        displayName: Download from artifact
        steps:
#          - source: current
#            artifact: MyBuildOutputs
#            path: $(Build.ArtifactStagingDirectory)/s/
#            patterns: |
#              **/imagemyfile.tar
#              **/*.tar

          - bash: | 
                 ls
                 pwd
                 cd  $(Build.ArtifactStagingDirectory)
                 ls
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'MyBuildOutputs'
              itemPattern: '**/*.tar'
              targetPath: '$(Pipeline.Workspace)'
          - bash: |
              echo "load docker image from tar"
              docker load -i imagemyfile.tar
              docker images
            displayName: load docker image from tar

          - task: PostBuildCleanup@3
            inputs:
              disableCertCheck: true
      
      - job: pushimage
        displayName: aws ecr
        steps:
          - bash: |
               echo "hello"
            displayName: testing
          - task: CmdLine@2
            inputs:
              script: |
                echo Write your commands here
                
                echo Hello world

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                
                echo 'Hello world'
          - task: Bash@3
            displayName: aws commands
            inputs:
              targetType: 'inline'
              script: |
                  export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
                  export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
                  export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
                  aws s3 ls
                  aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin sdfsdf792381.dkr.ecr.ap-south-1.amazonaws.com
          - task: AWSShellScript@1
            inputs:
              awsCredentials: 'aws ecr'
              regionName: 'ap-south-1'
              scriptType: 'inline'
              inlineScript: |
                aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 1sdfsdf2381.dkr.ecr.ap-south-1.amazonaws.com
                
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                docker tag harshad:$(Build.BuildId) 7sdfsdf81.dkr.ecr.ap-south-1.amazonaws.com/harshad:$(Build.BuildId)
                
#                docker push 140269792381.dkr.ecr.ap-south-1.amazonaws.com/harshad:$(Build.BuildId)
            displayName:  pushtag
          - task: ECRPushImage@1
            inputs:
              awsCredentials: 'aws ecr'
              regionName: 'ap-south-1'
              imageSource: 'imagename'
              sourceImageName: harshad
              sourceImageTag: $(Build.BuildId)
              pushTag: $(Build.BuildId)
             # repositoryName: sdfsdf81.dkr.ecr.ap-south-1.amazonaws.com/harshad
              repositoryName: harshad

          - task: PostBuildCleanup@3
            inputs:
              disableCertCheck: true

  - stage: awseksdeployment
    pool:
      name: overall
      demands:
      - Agent.Name -equals docker
    jobs:
      - job: kubernetesdeployment
        steps:
        - task: Kubernetes@1
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: 'kubernetesconnection'
            namespace: 'all-namespaces'
            command: 'get'
            arguments: 'pods'
        
        - task: Kubernetes@1
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: 'kubernetesconnection'
            namespace: 'default'
            command: 'apply'
            useConfigurationFile: true
            configuration: './deployment.yaml'
        - task: PostBuildCleanup@3
          inputs:
              disableCertCheck: true
